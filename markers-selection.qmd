# Gene markers selection


```{css, echo=FALSE}

pre {
  max-height: 300px;
}

div.sourceCode {
  overflow: scroll;
}

.bash-code {
  font-style: italic;
}

```


```{r, echo=FALSE, include=FALSE}
# load required libraries
up_packages = c("ape", "circlize", "ComplexHeatmap", "corrplot", "DECIPHER", "dendextend", "doSNOW", "foreach",
                "ggdist", "ggplot2", "ggtree", "gridExtra", "phangorn", "phylogram", "phytools", "reshape",
                "RColorBrewer", "scales", "stringr", "TreeDist", "treeio")
lapply(up_packages, require, character.only = TRUE)

# set working directory
mainDir = "/home/andrea/19ADC99/UlvaOmics"
knitr::opts_knit$set(root.dir = mainDir)

# source custom functions
source("src/utils.R")
```




## On this page

Biological insights and take-home messages are at the bottom of the page at Lesson Learnt: @sec-lesson-learnt-markers-selection.

* Here we compute the distance between the single-gene ML trees and the reconstructed *Ulva* species tree;
* we select the top 10 chloroplast and mitochondrial genes which single-gene tree is closer to the *Ulva* species tree; 
* we deploy a combinatorial approach to compute all the possible 2:10 gene combinations and the resulting ML phylogenetic tree;
* finally, we determine the minimum set of genes that can confidently reconstruct the *Ulva* species tree.


## Organellar gene selection

In order to select the top 10 genes for the combinatorial approach, we first need to calculate the distance metrics between the single-gene ML tree and the reconstructed *Ulva* species tree. We have decided to constrain the search to the top 10 genes, since the space of gene combinations that are possible increase exponentially the more genes we add to the combinatorial analysis.


### Gene distances to species tree

For each of the 99 chloroplast and mitochondrial genes we will calculate the four distance metrics that we have used so far: common nodes correlation, RF distance, KF distance and MAST %.


```{r}
#| echo: TRUE
#| eval: FALSE
#| result: hide
#| code-fold: FALSE
#| message: FALSE
#| warning: FALSE

# get cp ML gene trees
cp_ML_genes = list()
filenames = list.files("./03_cp_singleGene_ML/", pattern = "*.contree", full.names = TRUE)
cp_ML_genes = lapply(filenames, ape::read.tree)
names(cp_ML_genes) = strigr::str_remove_all(filenames, "./03_cp_singleGene_ML//")
names(cp_ML_genes) = strigr::str_remove_all(filenames, ".aln.contree")
cp_ML_genes[["cp_mt_ML"]] = phylogenetic_trees[["cp_mt_ML"]][["tree"]]

# get mt ML gene trees
mt_ML_genes = list()
filenames = list.files("./03_mt_singleGene_ML/", pattern = "*.contree", full.names = TRUE)
mt_ML_genes = lapply(filenames, ape::read.tree)
names(mt_ML_genes) = strigr::str_remove_all(filenames, "./03_mt_singleGene_ML//")
names(mt_ML_genes) = strigr::str_remove_all(filenames, ".aln.contree")
mt_ML_genes[["cp_mt_ML"]] = phylogenetic_trees[["cp_mt_ML"]][["tree"]]

# create distance lists
genes_sets = list("cp_mt_ML" = c(cp_ML_genes, mt_ML_genes[which(names(mt_ML_genes) != "cp_mt_ML")]))

empty_matrix = matrix(nrow = length(genes_sets[["cp_mt_ML"]]), ncol = length(genes_sets[["cp_mt_ML"]]))
colnames(empty_matrix) = names(genes_sets[["cp_mt_ML"]])
rownames(empty_matrix) = names(genes_sets[["cp_mt_ML"]])
cp_mt_genes_distances = list(
  "common_nodes_corr" = empty_matrix,
  "RF" = empty_matrix,
  "KF" = empty_matrix,
  "MAST_%" = empty_matrix
)

# populate distances lists
distance_sets = list("cp_mt_genes_distances" = cp_mt_genes_distances)

# get pairwise distances
for(j in 1:length(distance_sets)){
  for(i in 1:length(genes_sets[[j]])){
    for(k in 1:length(genes_sets[[j]])){
      
      # error handling
      # MAST call errors for very unresulved trees (e.g.: psaM)
      #   Error in root.phylo(x, bipart_x, resolve.root = TRUE) : 
      #   the specified outgroup is not monophyletic
      # catch error and move forward
      skip_to_next = FALSE
      
      # get tree
      tree1_tmp = genes_sets[[j]][[i]]
      tree2_tmp = genes_sets[[j]][[k]]
      
      # list of common species
      species_list = tree1_tmp$tip.label[which(tree1_tmp$tip.label %in% tree2_tmp$tip.label)]
      
      # get overlapping species
      tree1 = ape::keep.tip(tree1_tmp, species_list)
      tree2 = ape::keep.tip(tree2_tmp, species_list)
      
      # get distances
      distances = phangorn::treedist(tree1, tree2)
      distance_sets[[j]][["RF"]][i, k] = distances[[1]]
      distance_sets[[j]][["KF"]][i, k] = distances[[2]]
      #dist_DB_pairwise[["path_diff"]][i, k] = distances[[3]]
      distance_sets[[j]][["MAST_%"]][i, k] = tryCatch(
        length(phangorn::mast(tree1, tree2, tree = FALSE)) / length(species_list),
        error = function(e) { skip_to_next <<- TRUE }
      )
      
      # error handling
      if(skip_to_next){distance_sets[[j]][["MAST_%"]][i, k] = NA}
      
    }
  }
}


### get pairwise common_nodes_corr distances

# create CPU cluster
cl = parallel::makeCluster(8, type = "SOCK")
registerDoSNOW(cl)

# get chronos in parallel
chronos_list = foreach(k = 1:length(genes_sets[["cp_mt_ML"]]), .combine = "c") %dopar% {
  library("ape")
  # get tree
  tryCatch(chronos(genes_sets[["cp_mt_ML"]][[k]]), error = function(e) { NA })
}  
parallel::stopCluster(cl)
names(chronos_list) = names(genes_sets[["cp_mt_ML"]])

# get pairwise common_nodes_corr distances
for(j in 1:length(distance_sets)){
  for(i in 1:length(genes_sets[[j]])){
    for(k in 1:length(genes_sets[[j]])){
      
      # get trees
      tree1_tmp = chronos_list[[names(genes_sets[[j]])[i]]]
      tree2_tmp = chronos_list[[names(genes_sets[[j]])[k]]]
      
      # check trees and get distance
      if(all(!is.na(tree1_tmp)) & all(!is.na(tree2_tmp))){
        distance_sets[[j]][["common_nodes_corr"]][i, k] = cor.dendlist(
          dendlist(as.dendrogram(tree1_tmp), as.dendrogram(tree2_tmp)),
          method = "common_nodes")[2]
      } else {
        distance_sets[[j]][["common_nodes_corr"]][i, k] = NA
      }
    }
  }
}


# rename matrices for cp/mt overlapping rpl/rps genes (for plotting reasons)
for(i in 1:length(distance_sets[["cp_mt_genes_distances"]])){
  
  rownames(distance_sets[["cp_mt_genes_distances"]][[i]]) = c(
    "accD", "atpA", "atpB", "atpE", "atpF", "atpH", "atpI", "ccsA", "cemA", "chlI", "clpP",
    "infA", "petA", "petB", "petD", "petG", "petL", "psaA", "psaB", "psaC", "psaI", "psaJ",
    "psaM", "psbA", "psbB", "psbC", "psbD", "psbE", "psbF", "psbH", "psbI", "psbJ", "psbK",
    "psbL", "psbM", "psbN", "psbT", "psbZ", "rbcL", "rpl12", "rpl14", "rpl16", "rpl19", "rpl2",
    "rpl20", "rpl23", "rpl32", "rpl36", "rpl5", "rpoA", "rpoB", "rpoC1", "rpoC2", "rps11",
    "rps12", "rps14", "rps18", "rps19", "rps2", "rps3",  "rps4", "rps7", "rps8", "rps9",
    "tufA", "ycf1", "ycf12", "ycf20", "ycf3", "ycf4", "cp_mt_ML", "atp1", "atp4", "atp6",
    "atp8", "atp9", "cob", "cox1", "cox2", "cox3", "nad1", "nad2", "nad3", "nad4", "nad4L",
    "nad5", "nad6", "nad7", "rpl14 ", "rpl16 ", "rpl5 ", "rps10", "rps11 ", "rps12 ", "rps13",
    "rps14 ", "rps19 ", "rps2 ", "rps3 ", "rps4 "
  )
  
  colnames(distance_sets[["cp_mt_genes_distances"]][[i]]) = c(
    "accD", "atpA", "atpB", "atpE", "atpF", "atpH", "atpI", "ccsA", "cemA", "chlI", "clpP",
    "infA", "petA", "petB", "petD", "petG", "petL", "psaA", "psaB", "psaC", "psaI", "psaJ",
    "psaM", "psbA", "psbB", "psbC", "psbD", "psbE", "psbF", "psbH", "psbI", "psbJ", "psbK",
    "psbL", "psbM", "psbN", "psbT", "psbZ", "rbcL", "rpl12", "rpl14", "rpl16", "rpl19", "rpl2",
    "rpl20", "rpl23", "rpl32", "rpl36", "rpl5", "rpoA", "rpoB", "rpoC1", "rpoC2", "rps11",
    "rps12", "rps14", "rps18", "rps19", "rps2", "rps3",  "rps4", "rps7", "rps8", "rps9",
    "tufA", "ycf1", "ycf12", "ycf20", "ycf3", "ycf4", "cp_mt_ML", "atp1", "atp4", "atp6",
    "atp8", "atp9", "cob", "cox1", "cox2", "cox3", "nad1", "nad2", "nad3", "nad4", "nad4L",
    "nad5", "nad6", "nad7", "rpl14 ", "rpl16 ", "rpl5 ", "rps10", "rps11 ", "rps12 ", "rps13",
    "rps14 ", "rps19 ", "rps2 ", "rps3 ", "rps4 "
  )
  
}


```





```{r}
#| echo: FALSE
#| include: FALSE

# read distances lists
cp_mt_genes_distances = list(
  "common_nodes_corr" = utils::read.delim("./data/cp_mt.common_nodes_corr.txt", header = TRUE),
  "RF" = utils::read.delim("./data/cp_mt.RF.txt", header = TRUE),
  "KF" = utils::read.delim("./data/cp_mt.KF.txt", header = TRUE),
  "MAST_%" = utils::read.delim("./data/cp_mt.MAST_%.txt", header = TRUE)
)

distance_sets = list("cp_mt_genes_distances" = cp_mt_genes_distances)


```


Very well, let's now plot the generated distances!



::: panel-tabset

#### Correlation of the common nodes


```{r}
#| echo: TRUE
#| result: hide
#| code-fold: FALSE
#| message: FALSE
#| warning: FALSE
#| fig.height: 6
#| fig.cap: "Figure 1: Common node correlation between single-gene tree and reconstructed *Ulva* species tree."

# prepare gene lists
cp_genes_list = c(
  "accD", "atpA", "atpB", "atpE", "atpF", "atpH", "atpI", "ccsA", "cemA", "chlI", "clpP",
  "infA", "petA", "petB", "petD", "petG", "petL", "psaA", "psaB", "psaC", "psaI", "psaJ",
  "psaM", "psbA", "psbB", "psbC", "psbD", "psbE", "psbF", "psbH", "psbI", "psbJ", "psbK",
  "psbL", "psbM", "psbN", "psbT", "psbZ", "rbcL", "rpl12", "rpl14", "rpl16", "rpl19", "rpl2",
  "rpl20", "rpl23", "rpl32", "rpl36", "rpl5", "rpoA", "rpoB", "rpoC1", "rpoC2", "rps11",
  "rps12", "rps14", "rps18", "rps19", "rps2", "rps3",  "rps4", "rps7", "rps8", "rps9",
  "tufA", "ycf1", "ycf12", "ycf20", "ycf3", "ycf4"
)

mt_genes_list = c(
  "atp1", "atp4", "atp6", "atp8", "atp9", "cob", "cox1", "cox2", "cox3", "nad1", "nad2",
  "nad3", "nad4", "nad4L", "nad5", "nad6", "nad7", "rpl14 ", "rpl16 ", "rpl5 ", "rps10",
  "rps11 ", "rps12 ", "rps13", "rps14 ", "rps19 ", "rps2 ", "rps3 ", "rps4 "
)

# remove possible rows/columns with only NAs
tmp_matrix = distance_sets[["cp_mt_genes_distances"]][["common_nodes_corr"]]
tmp_matrix = tmp_matrix[, colSums(is.na(tmp_matrix)) < nrow(tmp_matrix)]
tmp_matrix = tmp_matrix[rowSums(is.na(tmp_matrix)) < ncol(tmp_matrix), ]

# prep annotation
organell = ifelse(rownames(tmp_matrix) %in% cp_genes_list, "cp",
                  ifelse(rownames(tmp_matrix) %in% mt_genes_list, "mt", "cp_mt")) %>%
              as.data.frame()
rownames(organell) = rownames(tmp_matrix)
colnames(organell) = "organell"
organell$color = ifelse(organell$organell == "cp", "#469d89", ifelse(organell$organell == "mt", "steelblue", "red"))

# plot raw distance
ComplexHeatmap::Heatmap(
  tmp_matrix,
  col = colorRamp2(c(min(tmp_matrix[!is.na(tmp_matrix)]), max(tmp_matrix[!is.na(tmp_matrix)])),
                   c("white", "steelblue")),
  row_names_gp = gpar(col = organell$color),
  column_names_gp = gpar(col = organell$color),
  top_annotation = HeatmapAnnotation(
    organell = as.matrix(organell$organell),
    show_annotation_name = FALSE,
    show_legend = FALSE,
    col = list(organell = c("cp_mt" = "red", "cp" = "#469d89", "mt" = "steelblue"))),
  left_annotation = rowAnnotation(
    organell = as.matrix(organell$organell),
    show_annotation_name = FALSE,
    col = list(organell = c("cp_mt" = "red", "cp" = "#469d89", "mt" = "steelblue"))),
  name = "common\nnodes\ncorr"
)

```


#### Robinson–Foulds distance


```{r}
#| echo: TRUE
#| result: hide
#| code-fold: FALSE
#| message: FALSE
#| warning: FALSE
#| fig.height: 6
#| fig.cap: "Figure 2: Robinson–Foulds distance between single-gene tree and reconstructed *Ulva* species tree."

# remove possible rows/columns with only NAs
tmp_matrix = distance_sets[["cp_mt_genes_distances"]][["RF"]]
tmp_matrix = tmp_matrix[, colSums(is.na(tmp_matrix)) < nrow(tmp_matrix)]
tmp_matrix = tmp_matrix[rowSums(is.na(tmp_matrix)) < ncol(tmp_matrix), ]

# prep annotation
organell = ifelse(rownames(tmp_matrix) %in% cp_genes_list, "cp",
                  ifelse(rownames(tmp_matrix) %in% mt_genes_list, "mt", "cp_mt")) %>%
              as.data.frame()
rownames(organell) = rownames(tmp_matrix)
colnames(organell) = "organell"
organell$color = ifelse(organell$organell == "cp", "#469d89", ifelse(organell$organell == "mt", "steelblue", "red"))

# plot raw distance
ComplexHeatmap::Heatmap(
  tmp_matrix,
  col = colorRamp2(c(min(tmp_matrix[!is.na(tmp_matrix)]), max(tmp_matrix[!is.na(tmp_matrix)])),
                   c("white", "#D55E00")),
  row_names_gp = gpar(col = organell$color),
  column_names_gp = gpar(col = organell$color),
  top_annotation = HeatmapAnnotation(
    organell = as.matrix(organell$organell),
    show_annotation_name = FALSE,
    show_legend = FALSE,
    col = list(organell = c("cp_mt" = "red", "cp" = "#469d89", "mt" = "steelblue"))),
  left_annotation = rowAnnotation(
    organell = as.matrix(organell$organell),
    show_annotation_name = FALSE,
    col = list(organell = c("cp_mt" = "red", "cp" = "#469d89", "mt" = "steelblue"))),
  name = "Robinson–Foulds"
)

```





#### Kuhner-Felsenstein distance


```{r}
#| echo: TRUE
#| result: hide
#| code-fold: FALSE
#| message: FALSE
#| warning: FALSE
#| fig.height: 6
#| fig.cap: "Figure 3: Kuhner-Felsenstein distance between single-gene tree and reconstructed *Ulva* species tree."

# remove possible rows/columns with only NAs
tmp_matrix = distance_sets[["cp_mt_genes_distances"]][["KF"]]
tmp_matrix = tmp_matrix[, colSums(is.na(tmp_matrix)) < nrow(tmp_matrix)]
tmp_matrix = tmp_matrix[rowSums(is.na(tmp_matrix)) < ncol(tmp_matrix), ]

# prep annotation
organell = ifelse(rownames(tmp_matrix) %in% cp_genes_list, "cp",
                  ifelse(rownames(tmp_matrix) %in% mt_genes_list, "mt", "cp_mt")) %>%
              as.data.frame()
rownames(organell) = rownames(tmp_matrix)
colnames(organell) = "organell"
organell$color = ifelse(organell$organell == "cp", "#469d89", ifelse(organell$organell == "mt", "steelblue", "red"))

# plot raw distance
ComplexHeatmap::Heatmap(
  tmp_matrix,
  col = colorRamp2(c(min(tmp_matrix[!is.na(tmp_matrix)]), max(tmp_matrix[!is.na(tmp_matrix)])),
                   c("white", "#D55E00")),
  row_names_gp = gpar(col = organell$color),
  column_names_gp = gpar(col = organell$color),
  top_annotation = HeatmapAnnotation(
    organell = as.matrix(organell$organell),
    show_annotation_name = FALSE,
    show_legend = FALSE,
    col = list(organell = c("cp_mt" = "red", "cp" = "#469d89", "mt" = "steelblue"))),
  left_annotation = rowAnnotation(
    organell = as.matrix(organell$organell),
    show_annotation_name = FALSE,
    col = list(organell = c("cp_mt" = "red", "cp" = "#469d89", "mt" = "steelblue"))),
  name = "Kuhner-Felsenstein\ndistance"
)

```




#### Maximum Agreement SubTree (MAST %)


```{r}
#| echo: TRUE
#| result: hide
#| code-fold: FALSE
#| message: FALSE
#| warning: FALSE
#| fig.height: 6
#| fig.cap: "Figure 4: Maximum Agreement SubTree % between single-gene tree and reconstructed *Ulva* species tree."

# remove possible rows/columns with only NAs
tmp_matrix = distance_sets[["cp_mt_genes_distances"]][["MAST_%"]]
tmp_matrix = tmp_matrix[, colSums(is.na(tmp_matrix)) < nrow(tmp_matrix)]
tmp_matrix = tmp_matrix[rowSums(is.na(tmp_matrix)) < ncol(tmp_matrix), ]

# prep annotation
organell = ifelse(rownames(tmp_matrix) %in% cp_genes_list, "cp",
                  ifelse(rownames(tmp_matrix) %in% mt_genes_list, "mt", "cp_mt")) %>%
              as.data.frame()
rownames(organell) = rownames(tmp_matrix)
colnames(organell) = "organell"
organell$color = ifelse(organell$organell == "cp", "#469d89", ifelse(organell$organell == "mt", "steelblue", "red"))

# plot raw distance
ComplexHeatmap::Heatmap(
  tmp_matrix,
  col = colorRamp2(c(min(tmp_matrix[!is.na(tmp_matrix)]), max(tmp_matrix[!is.na(tmp_matrix)])),
                   c("white", "steelblue")),
  row_names_gp = gpar(col = organell$color),
  column_names_gp = gpar(col = organell$color),
  top_annotation = HeatmapAnnotation(
    organell = as.matrix(organell$organell),
    show_annotation_name = FALSE,
    show_legend = FALSE,
    col = list(organell = c("cp_mt" = "red", "cp" = "#469d89", "mt" = "steelblue"))),
  left_annotation = rowAnnotation(
    organell = as.matrix(organell$organell),
    show_annotation_name = FALSE,
    col = list(organell = c("cp_mt" = "red", "cp" = "#469d89", "mt" = "steelblue"))),
  name = "MAST_%"
)

```


:::

The four indices RF, KF, MAST and the correlation between the common nodes metrics pointed out 24 chloroplast genes that provide the most similar topology compared to the *Ulva* species tree, namely *accD*, *atpF*, *chlI*, *petB*, *psaA*, *psaB*, *psbB*, *psbD*, *rpl12*, *rpl19*, *rpl2*, *rpl32*, *rpoA*, *rpoB*, *rpoC1*, *rpoC2*, *rps12*, *rps2*, *rps4*, *rps8*, *rps9*, *tufA*, *ycf1*, and *ycf20*. Among them, several genes such as *psaA*, *psaB*, and *psbB* are consistently identified by different matrices.

For the mitochondrial, 19 genes provide the most similar topology compared to the *Ulva* species tree, namely *atp1*, *atp6*, *cob*, *cox1*, *cox2*, *cox3*, *nad2*, *nad4*, *nad5*, *nad7*, *rpl14*, *rpl16*, *rps10*, *rps11*, *rps14*, *rps19*, *rps2*, *rps3*, and *rps4*. 

For each dataset and distance metric, we report below the top 10 single genes most similar to the *Ulva* species tree that we have reconstructed. The genes are ordered based on the decreasing values of the corresponding index.


```{r}
#| echo: FALSE
#| warning: FALSE

gene_table = data.frame(
  "rank" = seq(1, 10) %>% as.character(),
  "cp.RF" = c("psaA", "rpoC2", "rpoA", "rpoC1", "psaB", "psbB", "rps12", "ycf1", "chlI", "rps2"),
  "cp.MAST%" = c("psbB", "psaA", "rps2", "petB", "rpoC1", "psaB", "psbD", "rpl12", "rpoC2", "rpoA"),
  "cp.KF" = c("rpoA", "ycf20", "rpoB", "rpl32", "rps8", "accD", "atpF", "rps4", "rps9", "rpl2"),
  "cp.corr" = c("psaA", "psaB", "ycf1", "chlI", "rpoA", "psbB", "rpl19", "tufA", "rpoC1", "accD"),
  "mt.RF" = c("rps10", "rps3", "cox1", "rps2", "atp1", "atp6", "cox2", "nad4", "rps4", "nad2"),
  "mt.MAST%" = c("cox1", "cox2", "atp1", "cox3", "rps4", "rps2", "rps3", "cob", "rps19", "rps10"),
  "mt.KF" = c("rps3", "rps10", "rps2", "nad5", "nad7", "cox1", "rpl16", "rpl14", "rps14", "rps4"),
  "mt.corr" = c("cox2", "atp6", "cox3", "nad5", "rpl16", "rps11", "rps4", "nad2", "nad4", "cox1"),
  "cp_mt.RF" = c("psaA", "rpoC2", "rpoA", "rpoC1", "psaB", "psbB", "rps12", "ycf1", "chlI", "rps2"),
  "cp_mt.MAST%" = c("psbB", "psaA", "rps2", "cox1", "cox2", "petB", "rpoC1", "psaB", "psbD", "rpl12"),
  "cp_mt.KF" = c("mt_rps3", "mt_rps10", "rpoA", "mt_rps2", "nad5", "ycf20", "rpoB", "rpl32", "rps8", "accD"),
  "cp_mt.corr" = c("psaA", "psaB", "ycf1", "cox2", "chlI", "rpoA", "psbB", "rpl19", "tufA", "atp6")
)

# generate container with merged headers
sketch = htmltools::withTags(
  table(
    class = "display",
    thead(
      tr(
        th(rowspan = 2, "Rank"),
        th(colspan = 4, "chloroplast"),
        th(colspan = 4, "mitochondria"),
        th(colspan = 4, "chloroplast + mitochondria"),
      ),
      tr(
        lapply(rep(c("RF", "MAST %", "KF", "comm. node corr."), 3), th)
      )
    )
  )
)

# print gene table
DT::datatable(
  gene_table,
  container = sketch,
  rownames = FALSE,
  extensions = c("FixedColumns", "FixedHeader"),
  caption = "Table 1: top 10 genes closest to the reconstructed Ulva species tree.", 
  options = list(
    scrollX = TRUE, paging = TRUE, fixedHeader = FALSE, pageLength = 10
  )
)

```


## Markers selection

Prior analyses suggested that MAST% and common correlation nodes metrics are the best performers to assess phylogenetic tree distances when the tree do not have the same set of tips, we then selected (arbitrarily) 10 genes for the combinatorial approach, *petB*, *psaA*, *psaB*, *psbB*, *psbD*, *rps2* from the chloroplast and *atp6*, *cox1*, *cox2*, and *rps3* from the mitochondria.

With the combinatorial approach, we can now compute their 2:10 genes combination, concatenate their alignment and reconstruct the corresponding ML tree.


```{bash}
#| echo: TRUE
#| class.source: bash-code
#| eval: FALSE
#| result: hide
#| code-fold: FALSE
#| message: FALSE
#| warning: FALSE

#!/usr/bin/env bash

python3.10 combinatorial_ML_phylogeny.py \
  --infolder "./09_combinatorial_phylogeny/00_cp_genes/,./09_combinatorial_phylogeny/00_mt_genes/" \
  --names "CP,MT" \
  --iqtree ~/bin/iqtree-2.2.0-Linux/bin/iqtree2 \
  --n_genes 10 \
  --outdir ./09_combinatorial_phylogeny/

```


Awesome!

we have generated all possible 2-10 genes combination out of our selection, and we have concatenated the corresponding nucleotidic sequences and we have reconstructed their phylogenetic trees.

The combinatorial approach generated 945 unique combinations of at least a chloroplast and a mitochondrial marker:

* 24 combinations of 2 marker genes;
* 96 combinations of 3 markers;
* 194 combinations of 4 markers;
* 246 combinations of 5 markers;
* 209 combinations of 6 markers;
* 120 combinations of 7 markers;
* 45 combinations of 8 markers; 
* 10 combinations of 9 markers;
* finally 1 containing all 10 markers genes

Let's now see what is the minimum set of chloroplast and mitochondrial marker that approximate the reconstructed *Ulva* species tree.

First, we import all the generated combinatorial trees.

```{r}
#| echo: TRUE
#| eval: FALSE
#| result: hide
#| code-fold: FALSE
#| message: FALSE
#| warning: FALSE


# declare gene lists
cp_genes = c("petB", "psaA", "psaB", "psbB", "psbD", "rps2")
mt_genes = c("atp6", "cox1", "cox2", "rps3")

# import ref species tree
cp_mt_ML_dendro = ape::read.tree(file = "06_cp_mt_concat_ML/cp_mt_allgenes_concat.contree")

# create empty list of trees
combinatorial_trees = list(
  "cp_mt_conc_2_genes" = list("cp_mt_ML" = cp_mt_ML_dendro),
  "cp_mt_conc_3_genes" = list("cp_mt_ML" = cp_mt_ML_dendro),
  "cp_mt_conc_4_genes" = list("cp_mt_ML" = cp_mt_ML_dendro),
  "cp_mt_conc_5_genes" = list("cp_mt_ML" = cp_mt_ML_dendro),
  "cp_mt_conc_6_genes" = list("cp_mt_ML" = cp_mt_ML_dendro),
  "cp_mt_conc_7_genes" = list("cp_mt_ML" = cp_mt_ML_dendro),
  "cp_mt_conc_8_genes" = list("cp_mt_ML" = cp_mt_ML_dendro),
  "cp_mt_conc_9_genes" = list("cp_mt_ML" = cp_mt_ML_dendro),
  "cp_mt_conc_10_genes" = list("cp_mt_ML" = cp_mt_ML_dendro)
)

# populate combinatorial trees
for(k in 2:10){
  
  # get file list
  tree_list_all = list.files(path = paste(mainDir, "/09_combinatorial_phylogeny/01_cp_mt_combinatorial/cp_mt_conc_", k, "_genes", sep = ""),
                             pattern = "\\.contree$")
  # keep only trees with both cp and mt markers
  tree_list_fltr = c()
  for(tree in tree_list_all){
    cp = FALSE
    mt = FALSE
    # check if cp is present
    for(gene in cp_genes){
      if(grepl(gene, tree, fixed = TRUE)){
        cp = TRUE
      }
    }
    # check if mt is present
    for(gene in mt_genes){
      if(grepl(gene, tree, fixed = TRUE)){
        mt = TRUE
      }
    }
    if(cp == TRUE & mt == TRUE){
      tree_list_fltr = c(tree_list_fltr, tree)
    }
  }
  
  # import trees
  for(tree in tree_list_fltr){
    combinatorial_trees[[paste("cp_mt_conc_", k, "_genes", sep = "")]][[length(combinatorial_trees[[paste("cp_mt_conc_", k, "_genes", sep = "")]]) + 1]] = ape::read.tree(file = paste(mainDir, "/09_combinatorial_phylogeny/01_cp_mt_combinatorial/cp_mt_conc_", k, "_genes/", tree, sep = ""))
    names(combinatorial_trees[[paste("cp_mt_conc_", k, "_genes", sep = "")]])[[length(combinatorial_trees[[paste("cp_mt_conc_", k, "_genes", sep = "")]])]] = stringr::str_remove(tree, ".aln.contree")
  }
  
  # clean
  rm(cp, gene, k, mt, tree, tree_list_all, tree_list_fltr)
}

```


Next step: we calculate the distances between the combinatorial trees and the reconstructed *Ulva* species tree.



```{r}
#| echo: TRUE
#| eval: FALSE
#| result: hide
#| code-fold: FALSE
#| message: FALSE
#| warning: FALSE

# create distance lists
combinatorial_distances = list(
  "cp_mt_conc_2_genes" = NULL,
  "cp_mt_conc_3_genes" = NULL,
  "cp_mt_conc_4_genes" = NULL,
  "cp_mt_conc_5_genes" = NULL,
  "cp_mt_conc_6_genes" = NULL,
  "cp_mt_conc_7_genes" = NULL,
  "cp_mt_conc_8_genes" = NULL,
  "cp_mt_conc_9_genes" = NULL,
  "cp_mt_conc_10_genes" = NULL
)

# populate distance lists
combinatorial_list = c(25, 97, 195, 247, 210, 121, 46, 11, 2)
for(k in 1:length(combinatorial_distances)){
  
  # get size of the results matrix
  empty_matrix = matrix(nrow = combinatorial_list[[k]], ncol = combinatorial_list[[k]])
  colnames(empty_matrix) = names(combinatorial_trees[[k]])
  rownames(empty_matrix) = names(combinatorial_trees[[k]])
  
  # populate
  combinatorial_distances[[k]] = list(
    "common_nodes_corr" = empty_matrix,
    "RF" = empty_matrix,
    "KF" = empty_matrix,
    "MAST_%" = empty_matrix
  )
  
  # clean
  rm(empty_matrix)
}

# get pairwise distances
for(j in 1:length(combinatorial_trees)){
  for(i in 1:length(combinatorial_trees[[j]])){
    for(k in 1:length(combinatorial_trees[[j]])){
      
      # get tree
      tree1_tmp = combinatorial_trees[[j]][[i]]
      tree2_tmp = combinatorial_trees[[j]][[k]]

      # list of common species
      species_list = tree1_tmp$tip.label[which(tree1_tmp$tip.label %in% tree2_tmp$tip.label)]

      # get overlapping species
      tree1 = ape::keep.tip(tree1_tmp, species_list)
      tree2 = ape::keep.tip(tree2_tmp, species_list)
      
      # get distances
      distances = phangorn::treedist(tree1, tree2)
      combinatorial_distances[[j]][["RF"]][i, k] = distances[[1]]
      combinatorial_distances[[j]][["KF"]][i, k] = distances[[2]]
      combinatorial_distances[[j]][["MAST_%"]][i, k] = length(phangorn::mast(tree1, tree2, tree = FALSE)) / length(species_list)
      
      # clean
      rm(tree1, tree2, tree1_tmp, tree2_tmp, distances)
    }
  }
}


### get pairwise common_nodes_corr distances

# iterate all combinatorial trees
for(j in 1:length(combinatorial_trees)){
  
  # create CPU cluster
  cl = parallel::makeCluster(8, type = "SOCK")
  doSNOW::registerDoSNOW(cl)
  
  # get chronos in parallel
  chronos_list = foreach(k = 1:length(combinatorial_trees[[j]]), .combine = "c") %dopar% {
    library("ape")
    # get tree
    tryCatch(chronos(combinatorial_trees[[j]][[k]]), error = function(e) { NA })
  }  
  parallel::stopCluster(cl)
  names(chronos_list) = names(combinatorial_trees[[j]])
  
  # get pairwise common_nodes_corr distances
  for(i in 1:length(combinatorial_trees[[j]])){
    for(k in 1:length(combinatorial_trees[[j]])){
      
      print(paste(j, i, k, sep = ","))
      
      # get trees
      tree1_tmp = chronos_list[[names(combinatorial_trees[[j]])[i]]]
      tree2_tmp = chronos_list[[names(combinatorial_trees[[j]])[k]]]
      
      # check trees and get distance
      if(all(!is.na(tree1_tmp)) & all(!is.na(tree2_tmp))){
        combinatorial_distances[[j]][["common_nodes_corr"]][i, k] = tryCatch(
          cor.dendlist(dendlist(as.dendrogram(ape::root(tree1_tmp, outgroup = c("Oviri", "Pakin"), resolve.root = TRUE)),
                                as.dendrogram(ape::root(tree2_tmp, outgroup = c("Oviri", "Pakin"), resolve.root = TRUE))),
                       method = "common_nodes")[2],
          error = function(e) { NA })
      } else {
        combinatorial_distances[[j]][["common_nodes_corr"]][i, k] = NA
      }
    }
  }
}

```


For each combination (i.e.: 2-genes combination, 3-genes combination, etc.), a representative combination with the highest the MAST% and the common node correlation are shown in the table below. The best combination to use for the development of *Ulva* organellar universal markers should be the combination with the highest values of the two indices and the lowest number of markers in the combination.

The combination with five to eight markers have the highest value for the MAST% and the highest value for the common node correlation, but given the number of markers, it might pose more challenges for the development process later. The combination with four markers, *psbD*, *psaA*, *cox1*, *cox2*, which also has the highest value for the MAST% and has the value for the common node correlation slightly lower than the highest value possible, however, we believe that approximates faithfully the reconstructed *Ulva* species tree and can be used to develop universal primers for easy and cost-efficient *Ulva* species classification of field and herbarium specimens.



```{r}
#| echo: FALSE
#| warning: FALSE

gene_table = data.frame(
  "# genes" = seq(2, 10) %>% as.character(),
  "representative best genes markers" = c(
    "psaA_cox1", "rps2_psaA_cox1", "psbD_psaA_cox1_cox2", "psbD_rps2_psaA_cox1_cox2",
    "psbB_psbD_rps2_psaA_cox1_cox2", "psaB_psbB_psbD_rps2_psaA_cox1_cox2",
    "petB_psbB_psbD_rps2_psaA_atp6_cox1_cox2", "petB_psaB_psbB_psbD_rps2_psaA_atp6_cox1_rps3",
    "petB_psaB_psbB_psbD_rps2_psaA_atp6_cox1_cox2_rps3"
  ),
  "MAST %" = c("0.824", "0.882", "0.941", "0.941", "0.941", "0.941", "0.941", "0.922", "0.882"),
  "# of equivalent combinations" = c("1", "6", "1", "6", "10", "8", "2", "2", "1"),
  "Common node correlation" = c("0.901", "0.931", "0.95", "0.96", "0.96", "0.96", "0.96", "0.95", "0.931"),
  "# of equivalent combinations" = c("1  psaA_cox2", "1 psbB_cox1_cox2", "1", "1 psaB_psbB_rps2_cox1_cox2", "1 petB_psaB_psbB_rps2_cox1_cox2", "3 petB_psbD_rps2_psaA_atp6_cox1_cox2", "1", "2", "1")
)

colnames(gene_table) = c(
  "# genes",
  "representative best genes markers",
  "MAST %",
  "# of equivalent combinations",
  "Common node correlation",
  "# of equivalent combinations"
)

# print gene table
DT::datatable(
  gene_table,
  rownames = FALSE,
  extensions = c("FixedColumns", "FixedHeader"),
  caption = "Table 2: best combinatorial tree for each gene set", 
  options = list(
    scrollX = TRUE, paging = TRUE, fixedHeader = FALSE, pageLength = 10
  )
)

```




## Lessons Learnt {#sec-lesson-learnt-markers-selection}

So far, we have learnt:

* chloroplast genes *petB*, *psaA*, *psaB*, *psbB*, *psbD*, *rps2* and mitochondrial genes *atp6*, *cox1*, *cox2*, and *rps3* are among the ones with the single-gene ML tree closest to the reconstructed *Ulva* species tree;
* interestingly, commonly used markers (i.e.: *rbcL* and *tufA*) had a single-gene ML tree more distant to the reconstructed *Ulva* species tree than the other markers we have selected;
* out of the 945 2:10 gene combinations that we have tested, the 4-genes combination *psbD*-*psaA*-*cox1*-*cox2* provides a ML phylogenetic tree that faithfully approximate the reconstructed *Ulva* species tree and could be used for the development of universal *Ulva* species markers.


## Session Information

:::{.callout-note collapse=true}

```{r, echo=FALSE}
utils::sessionInfo()
```

:::

